{"version":3,"file":"static/js/681.541ed413.chunk.js","mappings":"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","sources":["components/ContactsPage/FormError/FormError.styled.jsx","components/ContactsPage/FormError/FormError.jsx","components/Register/Register.styled.jsx","components/Register/Register.jsx","pages/RegisterPage.jsx","utils/toastOptions.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ErrorElem = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  position: absolute;\n  top: 0px;\n  left: -220px;\n\n  font-size: 15px;\n\n  width: 200px;\n  padding: 10px;\n\n  border-radius: 10px;\n  color: #ffff;\n  background-color: rgb(252, 44, 44);\n`;\n","import { ErrorMessage } from 'formik';\nimport { ErrorElem } from './FormError.styled';\n\nexport const FormError = ({ name }) => {\n  return (\n    <ErrorMessage\n      name={name}\n      render={msg => {\n        return <ErrorElem>{msg}</ErrorElem>;\n      }}\n    />\n  );\n};\n","import styled from '@emotion/styled';\nimport { Form as FormikForm, Field } from 'formik';\n\nexport const FormTitle = styled.p`\n  font-size: 30px;\n  font-weight: 700;\n  margin: 0;\n  text-align: center;\n  margin-bottom: 20px;\n  color: rgb(8, 2, 120);\n`;\n\nexport const Form = styled(FormikForm)`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const Input = styled(Field)`\n  width: 450px;\n\n  font-family: inherit;\n  font-size: 18px;\n  color: rgb(40, 70, 219);\n\n  padding: 10px 15px;\n  border: 1px solid rgb(40, 70, 219);\n  border-radius: 5px;\n  outline: none;\n\n  &:focus {\n    outline: 2px solid rgb(40, 70, 219);\n  }\n`;\n\nexport const Label = styled.label`\n  width: 250px;\n\n  display: flex;\n  flex-direction: column;\n\n  &:not(:last-of-type) {\n    margin-bottom: 25px;\n  }\n\n  &:focus-within span {\n    font-weight: 600;\n  }\n`;\n\nexport const Text = styled.span`\n  font-size: 20px;\n  font-weight: 500;\n\n  color: rgb(21, 45, 169);\n  margin-bottom: 10px;\n`;\n\nexport const RegisterBtn = styled.button`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  font-family: 'Comic Sans MS';\n  font-size: 20px;\n\n  padding: 10px 25px;\n  margin: 0 auto;\n  margin-top: 20px;\n\n  color: #ffff;\n  background-color: rgb(64, 104, 233);\n\n  border-radius: 10px;\n  border: none;\n\n  cursor: pointer;\n  transition: scale 150ms ease-out;\n\n  &:hover,\n  &:focus {\n    transform: scale(1.02);\n    background-color: rgb(5, 41, 160);\n  }\n`;\n\nexport const Thumb = styled.div`\n  position: relative;\n`;\n","import { Label, Text, RegisterBtn, Thumb, Form, Input, FormTitle } from './Register.styled';\nimport { FormError } from 'components/ContactsPage/FormError';\nimport { ErrorElem } from 'components/ContactsPage/FormError/FormError.styled';\nimport { Box } from 'components/Box';\nimport { register } from 'redux/auth/authOperations';\nimport { toastOptions } from 'utils/toastOptions';\nimport { selectIsLoading } from 'redux/auth/authSelectors';\n\nimport { useNavigate } from 'react-router-dom';\nimport { useState } from 'react';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { ContactsSpinner } from 'components/ContactsPage/ContactsSpinner';\n\nconst schema = Yup.object().shape({\n  name: Yup.string()\n    .matches(\n      /[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я])?[a-zA-Zа-яА-Я]*)/,\n      'Имя может содержать только буквы, апостроф, тире и пробелы.'\n    )\n    .required('Это поле обязательное'),\n  email: Yup.string()\n    .matches(\n      /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/,\n      'Невалидное значение проверьте правильность введенных данных'\n    )\n    .required('Это поле обязательное'),\n  password: Yup.string()\n    .matches(/[0-9]{5}/, 'Пароль должен содержать минимум 5 цифр')\n    .matches(/[a-zA-Zа-яА-Я]{3}/, 'Пароль должен содержать минимум 3 буквы')\n    .required('Это поле обязательное'),\n});\n\nexport function Register() {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const [unvalidPassword, setUnvalidPassword] = useState(false);\n  const isLoading = useSelector(selectIsLoading);\n\n  const initialValues = {\n    name: '',\n    email: '',\n    password: '',\n  };\n\n  const handleSubmit = async (values, { resetForm }) => {\n    const password = values.password.trim();\n    if (password.includes(' ')) return setUnvalidPassword(true);\n\n    const formValues = {\n      name: values.name.trim(),\n      email: values.email.trim(),\n      password: values.password.trim(),\n    };\n\n    const { error } = await dispatch(register(formValues));\n    if (!error) {\n      resetForm();\n      toast.success(`You have successfully registered`, toastOptions);\n      return navigate('/', { replace: true });\n    }\n    toast.error(`An error has occurred, please check the information you entered.`, toastOptions);\n  };\n\n  const resetErrors = setErrors => {\n    setTimeout(() => setErrors({}), 3000);\n  };\n\n  return (\n    <Box\n      width=\"550px\"\n      p=\"30px 40px\"\n      m=\"0 auto\"\n      mt=\"40px\"\n      backgroundColor=\"rgb(240, 246, 254)\"\n      border=\"2px solid rgb(8, 2, 120)\"\n      borderRadius=\"10px\"\n      boxShadow=\"rgba(50, 50, 93, 0.7) 0px 13px 27px -5px, rgba(16, 4, 107, 0.3) 0px 8px 16px -8px\"\n    >\n      <FormTitle>Registration</FormTitle>\n      <Formik initialValues={initialValues} validationSchema={schema} onSubmit={handleSubmit}>\n        {({ errors, touched, setErrors }) => (\n          <Form autoComplete=\"off\">\n            <Label>\n              <Text>Name</Text>\n              <Thumb>\n                <Input type=\"text\" name=\"name\" placeholder=\"Name\" />\n                {errors.name && touched.name ? <FormError name=\"name\" /> : null}\n                {errors.name && touched.name && resetErrors(setErrors)}\n              </Thumb>\n            </Label>\n\n            <Label>\n              <Text>Email</Text>\n              <Thumb>\n                <Input type=\"email\" name=\"email\" placeholder=\"abcd@mail.com\" />\n                {errors.email && touched.email ? <FormError name=\"email\" /> : null}\n                {errors.email && touched.email && resetErrors(setErrors)}\n              </Thumb>\n            </Label>\n\n            <Label>\n              <Text>Password</Text>\n              <Thumb>\n                <Input type=\"password\" name=\"password\" placeholder=\"12345abcd\" />\n                {errors.password && touched.password ? <FormError name=\"password\" /> : null}\n                {errors.password && touched.password && resetErrors(setErrors)}\n                {unvalidPassword && <ErrorElem>Пароль должен быть без пробелов</ErrorElem>}\n              </Thumb>\n            </Label>\n\n            {!isLoading ? (\n              <RegisterBtn type=\"submit\">Register</RegisterBtn>\n            ) : (\n              <Box mt=\"20px\">\n                <ContactsSpinner size={'50'} />\n              </Box>\n            )}\n          </Form>\n        )}\n      </Formik>\n    </Box>\n  );\n}\n\nFormik.propTypes = {\n  initialValues: PropTypes.object.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n};\n\nFormError.propTypes = {\n  name: PropTypes.string.isRequired,\n};\n","import { Register } from 'components/Register';\n\nfunction RegisterPage() {\n  return <Register />;\n}\n\nexport default RegisterPage;\n","export const toastOptions = {\n  position: 'top-right',\n  autoClose: 3000,\n  hideProgressBar: false,\n  closeOnClick: true,\n  pauseOnHover: true,\n  draggable: true,\n  progress: undefined,\n};\n"],"names":["ErrorElem","styled","FormError","name","render","msg","FormTitle","Form","FormikForm","Input","Field","Label","Text","RegisterBtn","Thumb","schema","Yup","shape","matches","required","email","password","Register","dispatch","useDispatch","navigate","useNavigate","useState","unvalidPassword","setUnvalidPassword","isLoading","useSelector","selectIsLoading","handleSubmit","values","resetForm","trim","includes","formValues","register","error","toast","toastOptions","replace","resetErrors","setErrors","setTimeout","Box","width","p","m","mt","backgroundColor","border","borderRadius","boxShadow","initialValues","validationSchema","onSubmit","errors","touched","autoComplete","type","placeholder","ContactsSpinner","size","Formik","PropTypes","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined"],"sourceRoot":""}